name: CI

on: [push, pull_request]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            archive-suffix: "linux-x86_64"
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            archive-suffix: "linux-aarch64"
          - target: x86_64-apple-darwin
            os: macos-latest
            binary-suffix: ""
            archive-suffix: "macos-x86_64"
          - target: aarch64-apple-darwin
            os: macos-14
            binary-suffix: ""
            archive-suffix: "macos-aarch64"
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary-suffix: ".exe"
            archive-suffix: "windows-x86_64"

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - run: rustup toolchain install stable --profile minimal --no-self-update

      - run: rustup target add ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-targets: "true"

      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - run: |
          cargo check --target ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bamnado-${{ matrix.archive-suffix }}
          path: target/${{ matrix.target }}/release/bamnado${{ matrix.binary-suffix }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: Swatinem/rust-cache@v2

      - run: |
          cargo check
          cargo test --release

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4

      - run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Login into crates.io
        run: cargo login ${{ secrets.CRATES_IO }}

      - run: |
          cargo check
          cargo build --release
          cargo package
          cargo publish

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy and rename binaries with proper extensions
          cp artifacts/bamnado-linux-x86_64/bamnado release-assets/bamnado-linux-x86_64
          cp artifacts/bamnado-linux-aarch64/bamnado release-assets/bamnado-linux-aarch64
          cp artifacts/bamnado-macos-x86_64/bamnado release-assets/bamnado-macos-x86_64
          cp artifacts/bamnado-macos-aarch64/bamnado release-assets/bamnado-macos-aarch64
          cp artifacts/bamnado-windows-x86_64/bamnado.exe release-assets/bamnado-windows-x86_64.exe
          
          # Make binaries executable (except Windows)
          chmod +x release-assets/bamnado-linux-*
          chmod +x release-assets/bamnado-macos-*
          
          # List what we have
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}